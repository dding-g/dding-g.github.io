{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-vue/[Vue] 강의 공부 정리/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"ebf6a416-5770-5f65-afaa-c7766875267c","excerpt":"vue 공부용 study-vue repo vue2 -> vue3 로 넘어오면서 컴포넌트가  태그로 한번 감싸지는 부분이 삭제되었음. 렌더링시점 react로 따지면 setState가 실행 될 때 dom이 re-render 됨. vue…","html":"<h1>vue 공부용</h1>\n<p><a href=\"https://github.com/dding-g/study-vue\">study-vue repo</a></p>\n<ul>\n<li>\n<p>vue2 -> vue3 로 넘어오면서 컴포넌트가 <div> 태그로 한번 감싸지는 부분이 삭제되었음.</p>\n</li>\n<li>\n<p>렌더링시점</p>\n<ul>\n<li>react로 따지면 setState가 실행 될 때 dom이 re-render 됨. vue는 그 시점이 어디인지?</li>\n<li><code class=\"language-text\">import { ref } from 'vue'</code> 사용. 데이터가 바뀔 때 다시 렌더링 되는걸 vue에서는 <code class=\"language-text\">리액티브 변화</code>라고 함. <a href=\"https://kr.vuejs.org/v2/guide/reactivity.html\">documnet</a></li>\n<li><code class=\"language-text\">import { reactivity } from 'vue'</code>는 <code class=\"language-text\">ref</code>처럼 <code class=\"language-text\">리액티브</code>한 효과를 줄 수 있지만 <code class=\"language-text\">array</code> <code class=\"language-text\">object</code> 만 취급이 가능하다. (<code class=\"language-text\">ref</code>는 모든 자료형 가능)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">v-on:</code> -> <code class=\"language-text\">@</code> 로 생략 가능. <code class=\"language-text\">v-bind</code> 전체 생략 가능.</p>\n</li>\n<li>\n<p><code class=\"language-text\">oninput</code> <code class=\"language-text\">onchange</code> 차이</p>\n<ul>\n<li><code class=\"language-text\">onchange</code>는 요소의 값이 정해질 때. 포커스를 잃었을 때 발동되고 <code class=\"language-text\">oninput</code>은 요소의 값이 변경되는 즉시 발동된다. 따라서 <code class=\"language-text\">oninput</code>이 <code class=\"language-text\">onchange</code>보다 먼저 실행된다. <a href=\"https://medium.com/@madgb00/input-type-range-1-onchange-oninput-%EB%B9%84%EA%B5%90-664b58b3f6c\">medium</a></li>\n</ul>\n</li>\n<li>\n<p>양방향 바인딩(v-model)</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input :type=\"inputType\" :value=\"authorRef\" @input=\"updateName\" />\n&lt;input :type=\"inputType\" v-model=\"authorRef\" /></code></pre></div>\n</li>\n<li>두개는 같은 동작을 함. value, input 두개 다 바인딩 해줄 필요 없이 v-model 사용으로 한번에 가능</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">form</code>에서 <code class=\"language-text\">preventDefault</code>를 vue방식으로 표현 할 수 있음.</p>\n<ul>\n<li><a href=\"https://kr.vuejs.org/v2/guide/syntax.html#%EC%88%98%EC%8B%9D%EC%96%B4\">document</a>에서 볼 수 있음.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">v-for</code>을 사용할 때 <code class=\"language-text\">:key</code>는 필수로 바운딩 필요함.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div v-for=\"todo in todos\" :key=\"todo.id\" class=\"card\">\n  &lt;div class=\"card-body p-2\">\n    {{ todo }}\n  &lt;/div>\n&lt;/div></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">v-show</code> , <code class=\"language-text\">v-if</code> <a href=\"https://vuejs.org/guide/essentials/conditional.html#v-show\">document</a></p>\n<ul>\n<li><code class=\"language-text\">v-show</code>는 <code class=\"language-text\">display:none</code> 으로 css 값이 변경됨. 초기 렌더에 비용이 많이 듦.\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;div v-show=\"true\">true&lt;/div>\n  &lt;div v-show=\"false\">true&lt;/div></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">v-if</code> <a href=\"https://vuejs.org/api/built-in-directives.html#v-if\">document</a>\n<ul>\n<li>toggle 하는데 비용이 많이 듦</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">checkbox</code> 바인딩</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input\n  class=\"form-check-input\"\n  type=\"checkbox\"\n  v-model=\"todo.completed\"\n/>\n&lt;label class=\"form-check-label\">\n  {{ todo.value }}\n&lt;/label></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://kr.vuejs.org/v2/guide/class-and-style.html#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EB%AC%B8-1\">style 바인딩</a></p>\n<ul>\n<li><code class=\"language-text\">:style</code>\n<ul>\n<li><code class=\"language-text\">&lt;div :style=\"todo.completed ? todoStyle : {}\">style 바인딩&lt;/div></code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">:class</code>\n<ul>\n<li><code class=\"language-text\">&lt;div :class=\"{ todo : todo.completed }\">class 바인딩&lt;/div></code> todo.completed가 true면 <code class=\"language-text\">todo</code> css class 적용</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>vue에서 컴포넌트를 만들때는 크게 3가지로 구분됨. <code class=\"language-text\">tempalte, script, style</code></p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;template>Todo Simple Form&lt;/template>\n\n&lt;script>\nexport default {};\n&lt;/script>\n\n&lt;style>&lt;/style></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>자식 컴포넌트에서 부모 컴포넌트로 이벤트 emit</p>\n<ul>\n<li>자식 컴포넌트에서 context emit 가능. <a href=\"https://vuejs.org/guide/components/events.html#emitting-and-listening-to-events\">docs</a></li>\n</ul>\n</li>\n<li>\n<p>computed values</p>\n<ul>\n<li>탬플릿 내부에 너무 많은 연산을 집어넣게 되면 덩치가 커지고 유지, 관리가 어려울 수 있음.</li>\n<li>이걸 <code class=\"language-text\">computed value</code>가 해결해 주는데 ref로 선언된 객체가 변할 때 computed로 등록 된 값은 다시 계산되서 렌더링됨</li>\n<li>기본적으로 <code class=\"language-text\">getter</code>이고 <code class=\"language-text\">setter</code>를 등록할 수 있음. <a href=\"https://vuejs.org/guide/essentials/computed.html#writable-computed\">writable-computed</a></li>\n<li><a href=\"https://kyounghwan01.github.io/blog/Vue/vue3/composition-api/#composition-api%E1%84%80%E1%85%A1-%E1%84%82%E1%85%A1%E1%84%8B%E1%85%A9%E1%84%80%E1%85%A6-%E1%84%83%E1%85%AC%E1%86%AB-%E1%84%87%E1%85%A2%E1%84%80%E1%85%A7%E1%86%BC\">composition api 가 나온 배경</a></li>\n<li>어떨때 computed를 쓰고 어떨때 method를 써야 하는가?\n<ul>\n<li>computed는 여러곳에서 사용해도 1회만 연산 하는데, method는 호출 할 때 마다 연산을 새로함.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>vue-router</p>\n<ul>\n<li>spa용 vue router</li>\n<li><a href=\"https://router.vuejs.org/guide/essentials/history-mode.html#different-history-modes\">history mode 차이</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Vue] 강의 공부 정리","date":"July 26, 2022","description":"https://github.com/dding-g/study-vue","tags":["vue"]}},"previous":{"fields":{"slug":"/coding-test/BOJ-1260/"},"frontmatter":{"title":"BOJ-1260"}},"next":{"fields":{"slug":"/study-vue/[Vue] document 훑어보기 | 탬플릿 구문/"},"frontmatter":{"title":"[Vue] document 훑어보기 | 탬플릿 구문"}}},"pageContext":{"id":"ebf6a416-5770-5f65-afaa-c7766875267c","previousPostId":"bce13d47-a57b-5e58-8554-ca598846296f","nextPostId":"d5fab6be-8db6-58fb-b9b5-611f7b1ca53d"}},"staticQueryHashes":["2841359383","3257411868"]}