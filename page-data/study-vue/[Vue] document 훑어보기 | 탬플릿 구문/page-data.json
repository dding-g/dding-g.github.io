{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-vue/[Vue] document 훑어보기 | 탬플릿 구문/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"1c52e249-6220-5162-a635-b418f435ef96","excerpt":"Vue Document Guide Vue 란? 사용자 인터페이스를 구축하기 위한 Javascript 프레임워크. Option, Composition API Option API 아래와 같이 생긴게 Option API. Vue2 에서 사용되던 API형식이다. Composition API…","html":"<p><a href=\"https://vuejs.org/guide/introduction.html\">Vue Document Guide</a></p>\n<h2>Vue 란?</h2>\n<p>사용자 인터페이스를 구축하기 위한 Javascript 프레임워크.</p>\n<h2>Option, Composition API</h2>\n<h3>Option API</h3>\n<p>아래와 같이 생긴게 Option API. Vue2 에서 사용되던 API형식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Properties returned from data() become reactive state</span>\n  <span class=\"token comment\">// and will be exposed on `this`.</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Methods are functions that mutate state and trigger updates.</span>\n  <span class=\"token comment\">// They can be bound as event listeners in templates.</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Lifecycle hooks are called at different stages</span>\n  <span class=\"token comment\">// of a component's lifecycle.</span>\n  <span class=\"token comment\">// This function will be called when the component is mounted.</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The initial count is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>Count is<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></code></pre></div>\n<h3>Composition API</h3>\n<p>옵션을 선언하는 대신 함수를 가져와서 Vue 구성 요소를 작성할 수 있는 API.\nOption Composition 모두 동일한 시스템 위에서 동작하며 Option API는 Composition API 최상단에 implement 되어있다.\nComposition API가 더 간단하고 깔끔하게 작성할 수 있으나, 둘 중 하나만 알아야 하는건 아니고 어느 한쪽을 고집할 필요는 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// reactive state</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// functions that mutate state and trigger updates</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lifecycle hooks</span>\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The initial count is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>Count is<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></code></pre></div>\n<h2>시작</h2>\n<ul>\n<li>\n<p>모든 <code class=\"language-text\">Vue</code> 애플리케이션은 <code class=\"language-text\">createApp</code>을 사용해서 인스턴스를 만들어 시작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* root component options */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">.mount()</code> 함수가 호출되기 전 까지는 아무것도 렌더링 하지 않는다.\n실제 DOM 요소가 렌더링될 “컨테이너”인수가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3>앱 구성</h3>\n<p><code class=\"language-text\">createApp</code> 으로 만들어진 <code class=\"language-text\">app</code>은 전체 어플리케이션에 영향을 줄 수 있는 옵션을 구성할 수 있다.\n예를들어 <code class=\"language-text\">.config</code> <code class=\"language-text\">.component</code>가 그렇다.\n<a href=\"https://vuejs.org/api/application.html\">Application API 참조</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* handle error */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoDeleteButton\"</span><span class=\"token punctuation\">,</span> TodoDeleteButton<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 어디서든 TodoDeleteButton를 사용할 수 있게 된다.</span></code></pre></div>\n<h2>템플릿 구문</h2>\n<p>Vue는 DOM을 인스턴스 데이터에 선언적으로 바인딩 할 수 있는 HTML 기반 템플릿 구문을 사용한다.\n내부적으로 이 템플릿 코드를 Javascript 코드로 컴파일 한다.\nVue도 <a href=\"https://vuejs.org/guide/extras/render-function.html\">JSX를 사용한 렌더링 기능</a>을 직접 구현할 수 있다.</p>\n<h3>텍스트 보간 (Text Interpolation)</h3>\n<p>이중 중괄호(Mustaches)를 사용한 텍스트 보간 법은 데이터 바인딩의 가장 기본적인 형태이다.\n이중 중괄호 내부 값은 인스턴스의 property값 으로 대체되고 변경될 때 마다 업데이트 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Message<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> msg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></code></pre></div>\n<h3>Raw HTML</h3>\n<p>실제 HTML 문을 출력하려면 <code class=\"language-text\">v-html</code> 지시문을 사용해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Using text interpolation: {{ rawHtml }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Using v-html directive: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rawHtml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Using text interpolation: &lt;span style=\"color: red\">This should be red.&lt;/span>\n\nUsing v-html directive: This should be red. &lt;- 여기 빨간색임. \"color:red\"가 적용됨.</code></pre></div>\n<p><code class=\"language-text\">v-html</code> 과 같은걸 지시문(directive) 라고 하는데,\nVue에서 제공하는 특수 속성임을 알리기 위해 지시문은 <code class=\"language-text\">v-</code> 로 시작된다.</p>\n<blockquote>\n<p>보안 경고\n웹사이트에서 임의의 HTML을 동적으로 렌더링하는 것은 XSS 취약점 으로 쉽게 이어질 수 있기 때문에 매우 위험할 수 있습니다.\nv-html신뢰할 수 있는 콘텐츠 에만 사용 하고 사용자가 제공한 콘텐츠에는 사용 하지 마십시오.</p>\n</blockquote>\n<h3>속성(attribute) 바인딩</h3>\n<p>이중 중괄호(Mustaches)는 HTML 어트리뷰트에서는 사용할 수 없기 때문에 <code class=\"language-text\">v-bind</code> 지시문을 대신 사용해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dynamicId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">div</code>의 <code class=\"language-text\">id</code> 어트리뷰트와 동기화 하도록 동작한다.\n바인딩 된 값이 <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>이면 렌더링 된 요소에서 해당 어트리뷰트는 제거된다.</p>\n<p>아래와 같이 지시문 생략도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dynamicId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>여러 속성을 한번에 바인딩하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">objectOfAttrs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'wrapper'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">v-bind</code> 인수 없이 사용하여 단일 요소에 바인딩 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>objectOfAttrs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>표현식</h3>\n<p>이중 중괄호 내에서 사용되는 표현식에서 선언, 제어문 처리는 <strong>불가하다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- this is a statement, not an expression: --></span>\n{{ var a = 1 }}\n\n<span class=\"token comment\">&lt;!-- flow control won't work either, use ternary expressions --></span>\n{{ if (ok) { return message } }}</code></pre></div>\n<p>표현식 내부에서는 <a href=\"https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3\">제한된 전역 목록</a>만 전역 객체로 접근이 가능하다.\n만약 전역 객체를 추가하려면 <code class=\"language-text\">app.config.globalProperties</code>를 사용한다.</p>\n<h3>지시문</h3>\n<p><code class=\"language-text\">v-if / v-html / v-else-if / v-else / v-for ...</code> 등 외에도 <a href=\"https://vuejs.org/api/built-in-directives.html\">많은 지시문을 제공한다</a>.</p>\n<p><code class=\"language-text\">v-on</code> 은 아래와 같이 약어 처리가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doSomething<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- shorthand --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doSomething<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>동적 인수</h3>\n<p>대괄호로 감싸서 지시문 인수에서 Javascript 표현식을 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--\nNote that there are some constraints to the argument expression,\nas explained in the \"Dynamic Argument Value Constraints\" and \"Dynamic Argument Syntax Constraints\" sections below.\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>[attributeName]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- shorthand --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">:[attributeName]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>만약 <code class=\"language-text\">attributeName</code>이 <code class=\"language-text\">href</code>면 href로 평가되고, <code class=\"language-text\">id</code>면 id로 평가된다.</p>\n<p>핸들러도 마찬가지로 동적 바이딩이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>[eventName]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doSomething<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- shorthand --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">@[eventName]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doSomething<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">eventName</code>이 <code class=\"language-text\">click</code>이면 click, <code class=\"language-text\">focus</code>면 focus로 바인딩이 가능하다.</p>\n<h3>수정자</h3>\n<p>수정자는 <code class=\"language-text\">.</code>으로 표시되는 특수 점미사며 지시문이 특별한 방식으로 바인딩 되어야 함을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">@submit.prevent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onSubmit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>전체 지시문 구조</h3>\n<p><img src=\"https://vuejs.org/assets/directive.69c37117.png\" alt=\"전체 지시문 구문을 시각화 한 것\"></p>","frontmatter":{"title":"[Vue] document 훑어보기 | 탬플릿 구문","date":null,"description":"Vue guide를 훑어보고 정리한 문서","tags":["Vue"]}},"previous":{"fields":{"slug":"/study-vue/[Vue] document 훑어보기 | 반응성 기초(Reactivity)/"},"frontmatter":{"title":"[Vue] document 훑어보기 | 반응성 기초(Reactivity)"}},"next":{"fields":{"slug":"/study-vue/[Vue] Vuex 정리/"},"frontmatter":{"title":"[Vue] Vuex 정리"}}},"pageContext":{"id":"1c52e249-6220-5162-a635-b418f435ef96","previousPostId":"e4ff7f10-3705-5a07-9806-9d84c75812c1","nextPostId":"aad5ac1b-1bd2-57a2-8496-439a07e13719"}},"staticQueryHashes":["2841359383","3257411868"]}