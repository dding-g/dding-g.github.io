{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-vue/[Vue] Vuex 정리/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"aad5ac1b-1bd2-57a2-8496-439a07e13719","excerpt":"Vuex 지금은 Pinia가 vue의 공식적인 default 상태관리 라이브러리가 되었지만, 그 전까지 Vuex가 대중적으로 사용되었다. 앞으로 Vuex에는 새로운 기능이 추가되지는 않고 로 migration…","html":"<h2>Vuex</h2>\n<blockquote>\n<p>지금은 <a href=\"https://pinia.vuejs.org/\">Pinia</a>가 vue의 공식적인 default 상태관리 라이브러리가 되었지만, 그 전까지 Vuex가 대중적으로 사용되었다. 앞으로 Vuex에는 새로운 기능이 추가되지는 않고 <code class=\"language-text\">Pinia</code>로 migration하거나 새로운 프로젝트에서는 <code class=\"language-text\">Pinia</code>로 시작하는걸 강력하게 권장하고 있다.</p>\n</blockquote>\n<h3>Getters</h3>\n<h3>Setters</h3>\n<h3>Mutations</h3>\n<p>store에서 state를 변경할 수 있는 유일한 방법은 <code class=\"language-text\">mutation</code>으로 커밋하는 방법 뿐이다.\n<code class=\"language-text\">mutaion</code>은 이벤트와 비슷한데 각 뮤테이션은 string 타입과 handler를 가진다. 이 handler로 state를 수정할 수 있고 첫 parameter에 state를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// mutate state</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 mutation handler를 호출할 때는 directly하게 호출할 수 없고, <code class=\"language-text\">commit</code>함수를 이용해서 호출 할 수있다.</p>\n<h3>Actions</h3>\n<p><code class=\"language-text\">mutation</code>과 비슷하다.</p>\n<h3>모듈화</h3>","frontmatter":{"title":"[Vue] Vuex 정리","date":null,"description":null,"tags":["vue","vuex"]}},"previous":{"fields":{"slug":"/study-vue/[Vue] document 훑어보기 | 탬플릿 구문/"},"frontmatter":{"title":"[Vue] document 훑어보기 | 탬플릿 구문"}},"next":{"fields":{"slug":"/study-react/React에서의 재조정(Reconciliation)/"},"frontmatter":{"title":"React에서 Virtual DOM과 재조정(Reconciliation)"}}},"pageContext":{"id":"aad5ac1b-1bd2-57a2-8496-439a07e13719","previousPostId":"1c52e249-6220-5162-a635-b418f435ef96","nextPostId":"6484fbd2-6369-5829-9d1a-8f480e40d6c4"}},"staticQueryHashes":["2841359383","3257411868"]}