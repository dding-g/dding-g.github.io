{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/스코프(Scope)가 무엇인가요/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"7c547172-b7ca-5f2b-a4b3-3e19994b4b56","excerpt":"정의 스코프(Scope). 직역하면 “범위”이다. 즉 변수에 접근할 수 있는 범위 라고 볼 수 있다.\nJavascript에서는 global(전역)과 local(지역). 두가지 스코프가 존재한다. 대부분 C-family language 는 를 따른다. 하지만 Javascript…","html":"<h2>정의</h2>\n<p>스코프(Scope). 직역하면 “범위”이다. 즉 변수에 접근할 수 있는 범위 라고 볼 수 있다.\nJavascript에서는 global(전역)과 local(지역). 두가지 스코프가 존재한다.</p>\n<p>대부분 C-family language 는 <code class=\"language-text\">블록 레벨 스코프</code>를 따른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// block-level scope</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// use of undeclared identifier 'x'</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 Javascript는 <code class=\"language-text\">함수 레벨 스코프</code> 를 따른다.\n이는 블록 내에서 선언된 변수는 함수 코드 블록 내에서만 유효하고, 함수 외부에서는 유효하지 않는걸 의미한다.\n단 <code class=\"language-text\">let / const</code> 는 블록레벨 스코프가 적용된다. -> 이게 어떻게 가능한가? -> 실행 컨텍스트에서 스코프 체인으로 관리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h2>렉시컬 스코프</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ?</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ?</span></code></pre></div>\n<p>위 예제에서 함수 <code class=\"language-text\">bar</code>의 상위 스코프가 무엇인가에 따라 결과가 바뀐다.\n우리는 두가지 방법을 추측할 수 있는데</p>\n<ol>\n<li>함수를 어디서 호출하였는가에 따름</li>\n<li>함수를 어디서 선언했는가에 따름\n위 방법중 하나를 따라 상위 스코프가 결정된다.</li>\n</ol>\n<p>우리는 첫번째 방식을 동적 스코프(Dynamic Scope)라고 하고 두번쨰 방식을 렉시컬 스코프(Lexical Scope), 정적 스코프(Static Scope)라고 한다.\nJavascript는 렉시컬 스코프를 따른다.</p>","frontmatter":{"title":"스코프(Scope)가 무엇인가요?","date":"July 29, 2022","description":"<설명>","tags":["태그1","태그2"]}},"previous":{"fields":{"slug":"/study-js/call, apply, bind 차이점/"},"frontmatter":{"title":"call, apply, bind 차이점"}},"next":{"fields":{"slug":"/coding-test/BOJ-13913 (숨바꼭질 4)/"},"frontmatter":{"title":"BOJ-13913 (숨바꼭질 4)"}}},"pageContext":{"id":"7c547172-b7ca-5f2b-a4b3-3e19994b4b56","previousPostId":"dd15fa12-b332-508a-ada8-a11ddf2b465c","nextPostId":"6cd2f0d0-5e02-591b-bca8-125bd3723eaf"}},"staticQueryHashes":["2841359383","3257411868"]}