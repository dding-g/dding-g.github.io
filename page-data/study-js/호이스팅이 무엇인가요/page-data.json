{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/호이스팅이 무엇인가요/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"508ab013-3cc0-5051-8f51-4f5f6afc9b54","excerpt":"정의 호이스팅이란 인터프리터가 변수와 함수의 메모리 공간을 선언전에 미리 할당하는걸 의미한다. === 변수, 함수 “자리”를 메모리에 먼저 만든 것.\nJavascript에서는 모든 선언 (var, let, const, function, function* class…","html":"<h2>정의</h2>\n<p>호이스팅이란 인터프리터가 변수와 함수의 메모리 공간을 선언전에 미리 할당하는걸 의미한다. === 변수, 함수 “자리”를 메모리에 먼저 만든 것.\nJavascript에서는 모든 선언 (var, let, const, function, function* class)를 호이스팅한다.</p>\n<h2>var</h2>\n<p><code class=\"language-text\">var</code> 로 선언한 변수의 경우 호이스팅시 <code class=\"language-text\">undefined</code>로 변수를 초기화 한다. 즉, 선언과 초기화 과정이 동시에 이뤄진다.\n반면 <code class=\"language-text\">let</code> <code class=\"language-text\">const</code>로 선언한 변수의 경우 호이스팅 시 변수를 초기화하지 않는다.</p>\n<p>Javascript는 초기화를 제외한 <strong>선언만</strong> 호이스팅한다.\n<code class=\"language-text\">var</code>선언시 <code class=\"language-text\">undefined</code>, 그 외는 초기화하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">conosle<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 호이스팅한 var 선언으로 인해 undefined 출력</span>\n<span class=\"token keyword\">var</span> num <span class=\"token comment\">// 선언</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token comment\">// 초기화</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">conosle<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Reference Error : 존재하지 않는 병수 참조</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token comment\">// 전역변수 초기화</span></code></pre></div>\n<h2>let, const</h2>\n<p><code class=\"language-text\">let/const</code>로 선언한 변수도 호이스팅이 이뤄지지만, <code class=\"language-text\">var</code>와 달리 호이스팅시 <code class=\"language-text\">undefined</code>로 변수를 초기화하지는 않는다.\n<code class=\"language-text\">let/const</code>는 <code class=\"language-text\">Temporal Dead Zone(TDZ)</code>에 의해 제약을 받는다.</p>\n<p><code class=\"language-text\">TDZ</code></p>\n<ul>\n<li>일시적 사각지대</li>\n<li>선언과 초기화 단계 사이에 위치</li>\n</ul>\n<p><code class=\"language-text\">TDZ</code>는 선언단계와 초기화 단계 사이에 있는데 <code class=\"language-text\">var</code>는 선언과 초기화가 같은 단계에서 실행되지만 <code class=\"language-text\">let</code>는 선언 다음 초기화가 실행된다.\n따라서 선언 전에 변수를 호출하게 되면 <code class=\"language-text\">TDZ</code> 빠져 <code class=\"language-text\">Reference Error</code>를 뿜게 된다.\n<code class=\"language-text\">const</code>는 선언과 초기화가 동시에 진행되지만, 선언 이전에 <code class=\"language-text\">TDZ</code>가 생성되어 변수를 호출하게 되면 <code class=\"language-text\">Reference Error</code>를 뿜게 된다.</p>\n<p>재미있는건 <code class=\"language-text\">typeof</code> 에서 호이스팅된 변수를 호출할때다.\n아래 <code class=\"language-text\">notDefined</code> 변수는 정의되지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> notDefined <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>하지만 아래 호이스팅된 변수의 결과는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> variable <span class=\"token comment\">// Reference Error</span>\n<span class=\"token keyword\">let</span> variable</code></pre></div>\n<p><code class=\"language-text\">Reference Error</code>를 뿜는다.</p>\n<p><code class=\"language-text\">let</code>으로 선언한 <code class=\"language-text\">variable</code>은 그 직후 <code class=\"language-text\">not initialize</code> 상태를 갖고 아직 <code class=\"language-text\">undefined</code>로 초기화가 되기 전이다.\n<code class=\"language-text\">let/const</code>는 선언후에 아직 초기화가 되기 전 단계이기 때문에 <code class=\"language-text\">TDZ</code>에서 동작했다고 보는것이다.</p>\n<h2>함수 호이스팅</h2>\n<hr>\n<p>참고</p>\n<ul>\n<li><a href=\"https://poiemaweb.com/es6-block-scope\">https://poiemaweb.com/es6-block-scope</a></li>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20191014\">https://ui.toast.com/weekly-pick/ko_20191014</a></li>\n</ul>","frontmatter":{"title":"호이스팅이 무엇인가요","date":"July 24, 2022","description":"Javascript의 호이스팅에 대한 글","tags":["Javascript"]}},"previous":{"fields":{"slug":"/study-js/Javascript에서의 모듈 시스템/"},"frontmatter":{"title":"Javascript에서의 모듈 시스템"}},"next":{"fields":{"slug":"/study-js/클로저가 무엇인가요/"},"frontmatter":{"title":"클로저(Closures)가 무엇인가요"}}},"pageContext":{"id":"508ab013-3cc0-5051-8f51-4f5f6afc9b54","previousPostId":"17ed788f-6625-55cb-9080-da695448e148","nextPostId":"456699e7-deff-5f0c-9368-e2a550f6beca"}},"staticQueryHashes":["2841359383","3257411868"]}