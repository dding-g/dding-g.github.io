{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/JSConf: Inside of loop/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"a23110c3-748d-560d-8c5b-25d400a94909","excerpt":"1번에서 우리는 el이 dom에 append 되고 style을 바꾸면 혹시나 사용자에게 보일까봐 2번처럼 바꾼다.실제 그렇지는 않지만. 이벤트 루프 덕분에 1번처럼 코드를 작성해도 style을 바꾸는 코드와 append…","html":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1번...</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n\n<span class=\"token comment\">// 2번...</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>1번에서 우리는 el이 dom에 append 되고 style을 바꾸면 혹시나 사용자에게 보일까봐 2번처럼 바꾼다.실제 그렇지는 않지만.</li>\n<li>이벤트 루프 덕분에 1번처럼 코드를 작성해도 style을 바꾸는 코드와 append하는 코드는 서로 “경합”상태가 아니다.</li>\n</ul>\n<p>어떻게 이런게 가능할까?</p>\n<p>웹페이지에는 메인 스레드가 있다.\n보통 코드가 실행될 떄는 코드가 경합될 일이 거의 없지만 메인 스레드가 처리되는 시간이 길어지면(Promise) UI UX는 blocking되는 상태로 보인다. 싱글 스레드 이기 떄문에. 채기를 할 때는 인간도 싱글 스레드가 된다. 이때 차를 운전중이면 위험한 상태가 될 거고 재채기를 할 때는 아무것도 할 수 없게 된다.\n재채기 같은 코드는 피해야한다.</p>\n<h3>렌더링</h3>\n<p>위 예시에서 1번 2번 코드는 순서가 혼용되어도 상관없다고 했다. 왜 그럴까?\nJavascript는 항상 렌더링 전에 작업을 완료한다. 즉, Javascript 단계 이후에 랜더링 단계로 넘어간다.\n이게 이벤트 루프가 해주는 일 중 하나이다.\n테스크를 큐잉하는걸 <code class=\"language-text\">setTimeout(callback, 0)</code> 으로 하는건 좋지 않다.\n또한 animation을 위해 <code class=\"language-text\">setTimeout</code>을 사용하는건 좋지 않은 선택이며 timer나 네트워크 관련된 작업은 <code class=\"language-text\">requestAnimationFrame</code> 를 사용하는걸 추천한다.</p>\n<p>js에서 이벤트를 먼저 처리하고 css가 변경되는 루프의 예시를 보자.</p>\n<blockquote>\n<p><a href=\"https://youtu.be/cCOL7MC4Pl0?t=1186\">동영상 링크</a>에서 보면 더 이해하기 쉽다.</p>\n</blockquote>\n<ol>\n<li>박스의 X 좌표를 0px -> 1000px 으로 옮긴다.</li>\n<li>X 좌표를 1000px -> 500px로 옮긴다.</li>\n</ol>\n<p>다음과 같은 작업은 어떤 코드에서 실행될 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(1000px)\"</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">\"transform 1s ease-in-out\"</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(500px)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우리는 0 -> 1000 -> 500 으로 위치가 변하길 원한다.\n하지만 위 코드를 실행시켜보면 0 -> 500 으로 위치가 변한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(1000px)\"</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">\"transform 1s ease-in-out\"</span>\n\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(500px)\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이건 어떨까?\n여전히 0 -> 500으로 변한다.</p>\n<p>Javascript단계에서는 1000px 까지 옮겨졌다.\n하지만 렌더링 되기 직전에 requestAnimationFrame이 실행되면서 다시 500px로 옮겼기 때문에 최종 렌더링 에서는 500px로 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(1000px)\"</span>\n  box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">\"transform 1s ease-in-out\"</span>\n\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translateX(500px)\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 우리가 원하는 결과가 나온다.\nJavascript -> requestAnimationFr ame -> 렌더링 -> requestAnimationFrame -> 렌더링 단계로 수행하기 때문이다.</p>\n<blockquote>\n<p>다만 edge, safari의 경우 rAF를 paint 뒤 단계에서 실행하기 때문에 순서가 조금 바뀌어야 할 수 있다.\n<code class=\"language-text\">getComputedStyle</code>을 사용해서 같은 결과를 만들 수 있다. 하지만 chrome에서만 동작한다.</p>\n</blockquote>","frontmatter":{"title":"JSConf: Inside of loop","date":null,"description":"Jake Archibald: 루프 속 - JSConf.Asia (https://www.youtube.com/watch?v=cCOL7MC4Pl0)","tags":["JSConf","Javascript"]}},"previous":{"fields":{"slug":"/study-js/script 태그의 defer와 async가 무엇인가요/"},"frontmatter":{"title":"<script>의 defer와 async가 무엇인가요"}},"next":{"fields":{"slug":"/study-css/컨테이닝 블록이 무엇인가요/"},"frontmatter":{"title":"컨테이닝 블록이 무엇인가요"}}},"pageContext":{"id":"a23110c3-748d-560d-8c5b-25d400a94909","previousPostId":"1da4ff16-9df8-50bb-8980-d158791bd06b","nextPostId":"fecfadd6-2134-5eec-ac80-42308cb73ea2"}},"staticQueryHashes":["2841359383","3257411868"]}