{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/call, apply, bind 차이점/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"dd15fa12-b332-508a-ada8-a11ddf2b465c","excerpt":"call. apply는 바로 함수가 호출되고, bind는 할당된 객체를 한번 거쳐서 호출된다.  this를 특정 객체로 지정 가능.\n 에서 를 호출하면 를 보게됨. 도 call과 유사하다.\n하지만 매개변수를 배열로 받는다는점이 다르다.\n  this…","html":"<p>call. apply는 바로 함수가 호출되고, bind는 할당된 객체를 한번 거쳐서 호출된다.</p>\n<p><code class=\"language-text\">call()</code> this를 특정 객체로 지정 가능.\n<code class=\"language-text\">obj.call(targetObj, 'param1', 'param2')</code> <code class=\"language-text\">obj</code>에서 <code class=\"language-text\">this</code>를 호출하면 <code class=\"language-text\">targetObj</code>를 보게됨.</p>\n<p><code class=\"language-text\">apply()</code>도 call과 유사하다.\n하지만 매개변수를 배열로 받는다는점이 다르다.\n<code class=\"language-text\">obj.apply(targetObj, ['param1', 'param2'])</code></p>\n<p><code class=\"language-text\">bind()</code> this를 영구적으로 변환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>targetObj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"param2\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요런것도 가능.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// test</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloooooo\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// helloooooo</span></code></pre></div>\n<p>scope체인은??</p>","frontmatter":{"title":"call, apply, bind 차이점","date":"July 29, 2022","description":"call, apply, bind의 차이점","tags":["Javascript"]}},"previous":{"fields":{"slug":"/coding-test/BOJ-13549 (숨바꼭질3)/"},"frontmatter":{"title":"BOJ-13549 (숨바꼭질3)"}},"next":{"fields":{"slug":"/study-js/스코프(Scope)가 무엇인가요/"},"frontmatter":{"title":"스코프(Scope)가 무엇인가요?"}}},"pageContext":{"id":"dd15fa12-b332-508a-ada8-a11ddf2b465c","previousPostId":"303f7c58-a4cd-5264-b144-1f0bd982347e","nextPostId":"7c547172-b7ca-5f2b-a4b3-3e19994b4b56"}},"staticQueryHashes":["2841359383","3257411868"]}