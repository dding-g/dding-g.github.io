{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/이벤트 루프는 무엇인가요?/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"2002acca-b92e-5013-9733-853fe7df4055","excerpt":"youtube : 이벤트 루프는 무엇인가요 브라우저 동작 과정\n2014년 영상이지만 Event loop와 브라우저에서 Javascript가 동작하는 과정을 너무 잘 설명한 영상. JS…","html":"<h2><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ&#x26;t=12s\">youtube : 이벤트 루프는 무엇인가요</a></h2>\n<p><img src=\"/static/images/eventloop/eventloop.jpeg\" alt=\"브라우저 동작 과정\">\n2014년 영상이지만 Event loop와 브라우저에서 Javascript가 동작하는 과정을 너무 잘 설명한 영상.</p>\n<ul>\n<li>\n<p>JS는 싱글스레드임. 결국 한번에 하나의 스레드만 실행할 수 있다. 동시에 하나의 코드만 실행할 수 있다는 뜻.</p>\n</li>\n<li>\n<p>콜 스택은 데이터 스트럭처로 실행되는 순서를 기억하고 있다. 스택의 가장 위 쪽에서 함수를 꺼내는게 전부다. 아래 사진처럼 에러가 나게 되면 callstack을 역순으로 출력해 보여준다.\n<img src=\"/static/images/FE%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20%EC%97%B0%EC%8A%B5/callstack.png\" alt=\"callstack\"></p>\n<ul>\n<li><code class=\"language-text\">Maximum Call Stack Size Exceeded</code> 에러는 이런 callstack에 너무 많은 데이터가 쌓여있다는 뜻 이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">blocking</code> : 느려진다는건 어떤 걸 의미하나요?</p>\n<ul>\n<li>느린 동작이 스택에 남아있는 것을 blocking이라고 함.</li>\n<li>네트워크 요청은 컴퓨터 입장에서는 느림.</li>\n<li>자연스러운 UI UX를 위해서는 callstack이 blocking되는건 막아야함.</li>\n<li><code class=\"language-text\">setTimeout</code>이 실행되는 과정\n<ul>\n<li><code class=\"language-text\">setTimeout</code>은 callstack에 들어온 직후 사라진다. (꺼내진다)</li>\n<li>여기서 <code class=\"language-text\">동시성</code>과 <code class=\"language-text\">이벤트 루프</code>를 설명할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">동시성</code>과 <code class=\"language-text\">이벤트 루프</code></p>\n<ul>\n<li><code class=\"language-text\">webapis</code> 과 js runtime 환경은 다르다. <code class=\"language-text\">setTimeout</code>은 js runtime 환경에서 실행된 직후 <code class=\"language-text\">webapis</code>로 옮겨진 뒤 timer가 실행된다.</li>\n<li>WebApi에서 완료된 테스크의 callback은 task queue로 들어가게 된다.</li>\n<li>이벤트 루프의 역할은 callstack과 task queue를 주시하고 있는 것 이다. callstack이 <strong>비어있으면</strong> task queue 최상위 값을 빼서 stack에 넣어준다.\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TIMEOUT 0!!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n를 다른 코드와 같이 실행시켜보면 call stack이 빈 후에 이벤트 루프가 동작한다는걸 알 수 있다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"이벤트 루프는 무엇인가요?","date":"July 15, 2022","description":"이벤트 루프는 무엇인가요? 영상을 보고 정리한 글 (https://www.youtube.com/watch?v=8aGhZQkoFbQ)","tags":["Javascript"]}},"previous":{"fields":{"slug":"/coding-test/코딩테스트 로드맵/"},"frontmatter":{"title":"코딩테스트 로드맵"}},"next":null},"pageContext":{"id":"2002acca-b92e-5013-9733-853fe7df4055","previousPostId":"16951d96-1ce5-5f17-9fcf-c4eb6668331b","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}