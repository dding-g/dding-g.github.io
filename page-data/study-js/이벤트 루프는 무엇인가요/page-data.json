{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/이벤트 루프는 무엇인가요/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"ce1b93cc-46ea-51cf-aa5f-626615398b12","excerpt":"브라우저 동작 과정 youtube : 이벤트 루프는 무엇인가요 2014년 영상이지만 Event loop와 브라우저에서 Javascript가 동작하는 과정을 너무 잘 설명한 영상. JS…","html":"<p><img src=\"/images/eventloop.jpeg\" alt=\"브라우저 동작 과정\"></p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ&#x26;t=12s\">youtube : 이벤트 루프는 무엇인가요</a></li>\n</ul>\n<p>2014년 영상이지만 Event loop와 브라우저에서 Javascript가 동작하는 과정을 너무 잘 설명한 영상.</p>\n<ul>\n<li>JS는 싱글스레드임. 결국 한번에 하나의 스레드만 실행할 수 있다. 동시에 하나의 코드만 실행할 수 있다는 뜻.</li>\n<li>콜 스택은 데이터 스트럭처로 실행되는 순서를 기억하고 있다. 스택의 가장 위 쪽에서 함수를 꺼내는게 전부다. 아래 사진처럼 에러가 나게 되면 callstack을 역순으로 출력해 보여준다.</li>\n<li><code class=\"language-text\">Non-Blocking IO 어쩌고...</code> 같은 문구는 이런 싱글 스레드 기반인 Javascript가 <code class=\"language-text\">동시성</code>을 지원하기 때문이다.</li>\n</ul>\n<p><img src=\"/images/callstack.png\" alt=\"callstack\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">Maximum Call Stack Size Exceeded</code> 에러는 이런 callstack에 너무 많은 데이터가 쌓여있다는 뜻 이다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">blocking</code> : 느려진다는건 어떤 걸 의미하나요?</p>\n<ul>\n<li>느린 동작이 스택에 남아있는 것을 blocking이라고 함.</li>\n<li>네트워크 요청은 컴퓨터 입장에서는 느림.</li>\n<li>자연스러운 UI UX를 위해서는 callstack이 blocking되는건 막아야함.</li>\n<li><code class=\"language-text\">setTimeout</code>이 실행되는 과정\n<ul>\n<li><code class=\"language-text\">setTimeout</code>은 callstack에 들어온 직후 사라진다. (꺼내진다)</li>\n<li>여기서 <code class=\"language-text\">동시성</code>과 <code class=\"language-text\">이벤트 루프</code>를 설명할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">동시성</code>과 <code class=\"language-text\">이벤트 루프</code></p>\n<ul>\n<li><code class=\"language-text\">web Api</code> 과 js runtime 환경은 다르다. <code class=\"language-text\">setTimeout</code>은 js runtime 환경에서 실행된 직후 <code class=\"language-text\">web Api</code>로 옮겨진 뒤 timer가 실행된다.</li>\n<li>WebApi에서 완료된 테스크의 callback은 task queue로 들어가게 된다.</li>\n<li>이벤트 루프의 역할은 callstack과 task queue를 주시하고 있는 것 이다. callstack이 <strong>비어있으면</strong> task queue 최상위 값을 빼서 stack에 넣어준다.\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TIMEOUT 0!!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n를 다른 코드와 같이 실행시켜보면 call stack이 빈 후에 이벤트 루프가 동작한다는걸 알 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Microtask queue</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ECMA</code>에서는 <code class=\"language-text\">PromiseJobs</code>라는 내부 queue를 사용한다. V8 엔진에서는 이를 <code class=\"language-text\">Microtask queue</code>라고 부른다.</p>\n<ul>\n<li>\n<p>Microtask queue는 Call Stack이 비어있을 때 차례로 실행된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Promise</code>가 처리 될 때 <code class=\"language-text\">.then/.catch/.finally</code>는 마이크로태스크 큐에 들어가게 된다. 그래서 Call stack이 빈 다음 결과가 실행된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">unhandled rejection</code> 에러는 마이크로태스크 큐 끝에서 Promise 에러가 처리되지 못할 때 발생한다. Promise 체인에 <code class=\"language-text\">.catch</code>를 추가 해준다면 상관 없으나, 에러가 발생한 다음에 Promise 체인에 <code class=\"language-text\">.catch</code>를 추가해준 경우에는 에러가 발생한다.</p>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERRROR!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Catch!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unhandledrejection\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>위 경우에 <code class=\"language-text\">setTimeout</code> 내부에서 에러를 catch 해줬으나 <code class=\"language-text\">Microtask queue</code>에 들어가기 전, 이미 <code class=\"language-text\">Promise.reject</code>가 실행되어 비어있는 상태이기 때문에 <code class=\"language-text\">unhandledrejection</code>가 실행된다.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://ko.javascript.info/microtask-queue\">마이크로태스크</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ&#x26;t=12s\">youtube : 이벤트 루프는 무엇인가요</a></li>\n</ul>","frontmatter":{"title":"이벤트 루프는 무엇인가요?","date":"July 15, 2022","description":"이벤트 루프는 무엇인가요? 영상을 보고 정리한 글 (https://www.youtube.com/watch?v=8aGhZQkoFbQ)","tags":["Javascript"]}},"previous":{"fields":{"slug":"/study-cs/FE 면접 질문 연습/"},"frontmatter":{"title":"FE 면접 질문 연습"}},"next":{"fields":{"slug":"/coding-test/BOJ-1292/"},"frontmatter":{"title":"BOJ-1292"}}},"pageContext":{"id":"ce1b93cc-46ea-51cf-aa5f-626615398b12","previousPostId":"683f360a-7e6e-559e-b7da-e9be7b24a51b","nextPostId":"646b9a21-a58f-5946-af03-02a64715b715"}},"staticQueryHashes":["2841359383","3257411868"]}