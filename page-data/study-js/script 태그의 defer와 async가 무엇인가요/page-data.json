{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-js/script 태그의 defer와 async가 무엇인가요/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"1da4ff16-9df8-50bb-8980-d158791bd06b","excerpt":"…","html":"<p>우리는 <code class=\"language-text\">&lt;script src=\" ... \">&lt;/script></code> 태그를 통해 외부 리소스를 현재 페이지에 가져온다.</p>\n<p>이때 브라우저는 동작을 멈추고 해당 리소스가 모두 다운로드 받아질 때 까지 기다린다.</p>\n<p>다운로드 받는 동안 사용자는 멈춰있는 브라우저를 멍하니 바라보아야 하고, 찰나의 순간에도 사용자 이탈이 생기기 마련이다.</p>\n<p>그래서 우리는 브라우저가 페이지의 HTML 파싱 작업에 더 신경쓸 수 있도록 배려해줘야 한다.</p>\n<h2>async, defer</h2>\n<p><code class=\"language-text\">async</code>는 javascript에서 흔하게 등장하는 단어이다.\nJavascript 엔진은 하나의 Call stack으로 동작하기 때문에 기본적으로 <code class=\"language-text\">동기적 언어</code>이다.\n하지만 우리는 위와 같은 상황처럼 특수한 상황에서 사용자를 기다리게 할 수 없기 때문에 “비동기”로 동작할 수 있도록 해줘야한다.</p>\n<p>기본적으로 <code class=\"language-text\">async</code> <code class=\"language-text\">defer</code> 둘 다 백그라운드에서 리소스를 다운로드 받는다.\n따라서 다운로드를 받는 중에도 HTML 파싱 작업은 멈추지 않는다.</p>\n<p>차이점은 “실행을 언제하는가?” 에서 오는데,</p>\n<ul>\n<li><code class=\"language-text\">defer</code> : HTML 파싱이 끝난 이후 차례대로 실행된다.\n<ul>\n<li><code class=\"language-text\">defer</code> 태그가 달린 스크립트가 차례로 있을 때, 다운로드가 완료된 순서에 상관없이 선언된 순서대로 스크립트가 실행된다.</li>\n<li><code class=\"language-text\">DOMContentLoaded</code> 이벤트가 발생되기 전에 <code class=\"language-text\">defer</code>가 실행된다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://asdf.com/big.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://asdf.com/small.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>실행 순서 : <code class=\"language-text\">big -> small</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">async</code> : 페이지와 완전히 독립적으로 실행된다.\n<ul>\n<li>리소스가 모두 다운로드된 직후 선언 순서와 관계 없이 실행된다. 다운로드 받을때는 백그라운드에서 동작하기 때문에 HTML 파싱에 영향을 주지 않지만, 다운로드 완료 시점에 따라 DOM 생성 과정에 영향을 줄 수 있다.</li>\n<li><code class=\"language-text\">async</code>는 독립적으로 동작하기 때문에 <code class=\"language-text\">DOMContentLoaded</code> 이벤트 실행 시점과는 상관없다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://asdf.com/big.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://asdf.com/small.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>실행 순서 : <code class=\"language-text\">small -> big</code> (small이 먼저 다운받아진다는 가정 하. big이 먼저 다운로드 받아지면 먼저 실행되기 때문에 기본적으로 실행 순서는 보장할 수 없다. <code class=\"language-text\">Google Analytics</code> 처럼 사용자의 트래픽을 추적해야하는 경우 async 가 잘 맞는다고 볼 수 있다.)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://ko.javascript.info/script-async-defer\">defer, async 스크립트</a></li>\n</ul>","frontmatter":{"title":"<script>의 defer와 async가 무엇인가요","date":null,"description":"script 태그의 defer, async의 차이에 대해 풀어쓴 글","tags":["Javascript"]}},"previous":{"fields":{"slug":"/study-js/Javascript에서의 모듈 시스템/"},"frontmatter":{"title":"Javascript에서의 모듈 시스템"}},"next":{"fields":{"slug":"/study-js/JSConf: Inside of loop/"},"frontmatter":{"title":"JSConf: Inside of loop"}}},"pageContext":{"id":"1da4ff16-9df8-50bb-8980-d158791bd06b","previousPostId":"50f17fd4-7e08-5884-a796-481ce76410c3","nextPostId":"a23110c3-748d-560d-8c5b-25d400a94909"}},"staticQueryHashes":["2841359383","3257411868"]}