{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-cs/홈페이지가 사용자에게 보이기까지/","result":{"data":{"site":{"siteMetadata":{"title":"dding-glog"}},"markdownRemark":{"id":"ab3b1cae-b55d-5dbe-b80c-7e294a1f9974","excerpt":"순서 정리 www.google.com 을 주소창에 타이핑하고 Enter키를 누른다. DNS에서 www.google.com 을 찾아 등록된 IP로 Get Request를 보낸다. 반환된 html을 렌더링 한다. 크게보면 위와 같다.\n조금 더 상세하게 알자보자. DNS에서 www…","html":"<h2>순서 정리</h2>\n<ol>\n<li><a href=\"http://www.google.com\">www.google.com</a> 을 주소창에 타이핑하고 Enter키를 누른다.</li>\n<li>DNS에서 <a href=\"http://www.google.com\">www.google.com</a> 을 찾아 등록된 IP로 Get Request를 보낸다.</li>\n<li>반환된 html을 렌더링 한다.</li>\n</ol>\n<p>크게보면 위와 같다.\n조금 더 상세하게 알자보자.</p>\n<h3>DNS에서 <a href=\"http://www.google.com%EC%9D%84\">www.google.com을</a> 찾는다.</h3>\n<p>DNS는 <code class=\"language-text\">.</code> 으로 나눠진 레벨별로 검색을 한다.\n맨 처음 <code class=\"language-text\">Top-level</code>에서는 <code class=\"language-text\">.com</code> 에서 <code class=\"language-text\">google.com</code> 으로 redirect 시켜주고\n<code class=\"language-text\">Second-level</code>에서는 <code class=\"language-text\">google.com</code>에서 <code class=\"language-text\">www.google.com</code>으로 redirect 시켜준다.\n마지막 <code class=\"language-text\">Third-level</code>에서는 <code class=\"language-text\">www.google.com</code>에 해당하는 ip주소를 검색해서 브라우저로 return한다.</p>\n<h3>브라우저에서 google로</h3>\n<p>브라우저는 DNS로 부터 받은 ip주소에 HTTP통신을 요청한다.\n그전에 <code class=\"language-text\">TCP/IP</code> 통신의 <code class=\"language-text\">TCP/IP 3 way handshake</code> 방식으로 connection을 먼저 맻어야 한다.\n<code class=\"language-text\">TCP/IP 3 way handshake</code>는 아래 순서로 이뤄진다.</p>\n<ol>\n<li>Client → Server <code class=\"language-text\">SYN(Synchronize Sequence Number)</code>\n<ol>\n<li>Client가 SYNC 패킷을 서버에 보내면 Client는 서버의 <code class=\"language-text\">SYN/ACK</code>응답을 기다리는 상태가 된다.</li>\n</ol>\n</li>\n<li>Server → Client <code class=\"language-text\">SYN + ACK(Acknowledgement)</code>\n<ol>\n<li>Server는 Client에 요청을 수락한다는 <code class=\"language-text\">SYN + ACK</code> 요청을 보내게 되고 Client의 <code class=\"language-text\">ACK</code>를 기다리는 상태가 된다.</li>\n</ol>\n</li>\n<li>Client → Server <code class=\"language-text\">ACK</code>\n<ol>\n<li>Client는 마지막으로 Server에게 <code class=\"language-text\">ACK</code> 요청을 보내고 Server와 Client가 통신할 수 있게 된다.</li>\n</ol>\n</li>\n</ol>\n<p>다음은 HTTP request를 날린다.\nClient는 <code class=\"language-text\">www.google.com</code>에 할당된 IP로 GET request를 날리고\nServer는 요청을 처리하고 response data를 생성한다.\n이후에 Status code등 각종 메타 데이터를 포함한 HTTP response를 Client로 보내주고\n최종적으로 Client는 받은 데이터를 브라우저에 보여준다.</p>\n<h3>브라우저 HTML 렌더링</h3>\n<p>브라우저의 주요 기능은 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것 이다. 보통 HTML문서 이지만 PDF, 이미지 등 다른 형태일 수 있고 자원의 주소는 URI(Uniform Resource Identifier)에 의해 정해진다.</p>\n<p><strong>렌더링 엔진</strong>\n사파리는 <code class=\"language-text\">Webkit</code>, 파이어폭스 모질라에서 직접 만든 <code class=\"language-text\">게코(Gecko)</code>, 크롬은 Webkit 베이스로 제작한 <code class=\"language-text\">블링크</code> 를 사용한다.</p>\n<p>렌더링 엔진은 아래와 같은 순서로 동작한다.</p>\n<blockquote>\n<p>DOM트리 구축을 위한 HTML파싱 → 렌더 트리 구축 → 렌더 트리 배치 → 렌더 트리 그리기</p>\n</blockquote>\n<p><img src=\"https://d2.naver.com/content/images/2015/06/helloworld-59361-3.png\" alt=\"Webkit 동작 과정\"></p>\n<hr>\n<p><em>참고 자료</em></p>\n<ul>\n<li><a href=\"https://d2.naver.com/helloworld/59361\">Naver D2 - 브라우저는 어떻게 동작하는가?</a></li>\n<li><a href=\"https://devjin-blog.com/what-happen-browser-search/\">[번역] Browser에 www.google.com을 검색하면 어떤 일이 일어날까?\n</a></li>\n</ul>","frontmatter":{"title":"홈페이지가 사용자에게 보이기까지","date":"July 19, 2022","description":"주소창에 www.google.com 을 검색하면 어떤 일이 일어날까?","tags":["CS"]}},"previous":{"fields":{"slug":"/coding-test/BOJ-1062/"},"frontmatter":{"title":"BOJ-1062"}},"next":{"fields":{"slug":"/coding-test/BOJ-3085/"},"frontmatter":{"title":"BOJ-3085"}}},"pageContext":{"id":"ab3b1cae-b55d-5dbe-b80c-7e294a1f9974","previousPostId":"5caac7ad-643b-505c-bb5a-5b6165da4ec0","nextPostId":"57aaa7d0-5285-5e4e-b5b2-e9e0fcee970d"}},"staticQueryHashes":["2841359383","3257411868"]}